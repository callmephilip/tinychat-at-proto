// ðŸ¦• AUTOGENERATED! DO NOT EDIT! File to edit: appview.ipynb

// based on https://docs.deno.com/examples/chat_app_tutorial/

export default class ChatServer {
  private connectedClients = new Map<string, WebSocket>();

  public handleConnection(ws: WebSocket) {
    const id = `${Math.random() * 100000}`;

    ws.onclose = () => {
      this.clientDisconnected(id);
    };

    this.connectedClients.set(id, ws);
    console.log(">>>>>>> connectedClients", this.connectedClients.size);
  }

  private clientDisconnected(id: string) {
    this.connectedClients.delete(id);
    console.log(`Client ${id} disconnected`);
  }

  public broadcast(message: string) {
    for (const client of this.connectedClients.values()) {
      console.log(">>>>>>> sending message to", client);
      client.send(message);
    }
  }
}
import { Hono } from "hono";
// import { cors } from "hono/cors";
import { HTTPException } from "hono/http-exception";
import { upgradeWebSocket } from "hono/deno";
import { Message } from "@tinychat/ui/message.tsx";
import { createMiddleware } from "hono/factory";
import { TinychatOAuthClient } from "tinychat/oauth.ts";
import { TinychatAgent } from "tinychat/agent.ts";
import { getDatabase } from "tinychat/db.ts";
import type { Database } from "tinychat/db.ts";
import { ActorView } from "tinychat/api/types/chat/tinychat/actor/defs.ts";
import { MessageView } from "tinychat/api/types/chat/tinychat/server/defs.ts";
import { ids } from "tinychat/api/lexicons.ts";
import { getProfile } from "tinychat/bsky.ts";
import { Messaging } from "tinychat/core/messaging.ts";

export type AppContext = {
  agent: () => Promise<TinychatAgent | undefined>;
  user: () => Promise<ActorView | undefined>;
  db?: Database | undefined;
};

export type HonoServer = Hono<{
  Variables: {
    ctx: AppContext;
  };
}>;

const app = new Hono();
const chatServer = new ChatServer();

app.use(
  "*",
  createMiddleware(async (c, next) => {
    const authorization = c.req.header("Authorization");
    const { client: oauthClient, user } = authorization
      ? await TinychatOAuthClient.fromAuthorizationHeader(authorization)
      : {};
    c.set("ctx", {
      oauthClient,
      session: undefined,
      agent: async () => await TinychatAgent.create(oauthClient, user),
      user: async () => await Promise.resolve(undefined),
      db: getDatabase(),
    });
    await next();
  }),
);

app.get("/", (c) => c.redirect("https://github.com/callmephilip/tinychat"));

// app.use("/ws", cors());
app.get(
  "/ws",
  upgradeWebSocket(() => {
    return {
      onOpen: (_, ws) => {
        if (!ws.raw) {
          return;
        }
        chatServer.handleConnection(ws.raw);
      },
    };
  }),
);
import {
  NewChannelRecord,
  NewMembershipRecord,
  NewMessageRecord,
  NewServerRecord,
  startJetstream,
} from "tinychat/firehose.ts";

type AppViewShutdown = () => Promise<void>;
type AppViewContext = {
  database?: Database | undefined;
};

export const runAppView = (
  { database }: AppViewContext = {},
): AppViewShutdown => {
  const db = database || getDatabase();
  const messaging = new Messaging(db);
  console.log("Starting appview with db", db);

  // Cleanup function
  const cleanup = () => {
    console.log("goodbye");
    Deno.removeSignalListener("SIGINT", cleanup);
    Deno.removeSignalListener("SIGTERM", cleanup);
    Deno.exit(0);
  };

  // Handle shutdown signals

  Deno.addSignalListener("SIGINT", cleanup);
  Deno.addSignalListener("SIGTERM", cleanup);

  console.log("Service started");

  const shutdownJetstream = startJetstream({
    db,
    onNewServer: (m: NewServerRecord) => {
      db.prepare(`
      INSERT INTO servers (uri, name, creator) VALUES (
        :uri, :name, :creator
      )`).run({
        uri: m.uri,
        name: m.commit.record.name,
        creator: m.did,
      });
      db.prepare(
        `INSERT INTO server_memberships (user, server) VALUES (
          :creator, :server
        ) ON CONFLICT(user, server) DO NOTHING`,
      ).run({
        creator: m.did,
        server: m.uri,
      });
    },
    onNewChannel: (m: NewChannelRecord) => {
      try {
        db.prepare(
          `INSERT INTO channels (uri, name, server) VALUES (
          :uri, :name, :server
        ) ON CONFLICT(uri) DO NOTHING`,
        ).run({
          uri: m.uri,
          name: m.commit.record.name,
          server: m.commit.record.server,
        });
      } catch (e) {
        console.error(
          ">>>>>>>>>>>>>>>>> ERRR >>>>>>>>>>>>>>>>>Error adding channel",
          e,
        );
        console.log("Adding channel", m);
      }
    },
    onNewMembership: (m: NewMembershipRecord) => {
      // add server memberships record
      try {
        db.prepare(
          `INSERT INTO server_memberships (user, server) VALUES (
          :creator, :server
        ) ON CONFLICT(user, server) DO NOTHING`,
        ).run({
          creator: m.did,
          server: m.commit.record.server,
        });
      } catch (e) {
        // normally this happens when creating a server and adding the creator to the server
        // membership gets processed before the server creation wraps up
        console.error("Error adding server membership", e);
      }
    },
    onNewMessage: (m: NewMessageRecord) => {
      messaging.receiveMessage({
        m: m.commit.record,
        uri: m.uri,
        sender: m.did,
        time_us: `${m.time_us}`,
      });

      // grab new message + sender info and broadcast to chat
      const { messages } = pullMessagesFromDb({ db, uri: m.uri, limit: 1 });

      chatServer.broadcast(
        JSON.stringify({
          data: messages[0],
          html: Message({ message: messages[0], oob: true }).toString(),
        }),
      );
    },
  });

  const server = Deno.serve(
    { port: parseInt(Deno.env.get("APPVIEW_PORT") || "8000") },
    app.fetch,
  );

  return async () => {
    try {
      shutdownJetstream();
      console.log("Shutting down server");
      await server.shutdown();
      console.log("Server shut down");
      Deno.removeSignalListener("SIGINT", cleanup);
      Deno.removeSignalListener("SIGTERM", cleanup);
    } catch (e) {
      console.error("Error shutting down server", e);
    }
  };
};
app.get(`/xrpc/${ids.ChatTinychatActorGetProfile}`, async (c) => {
  const { db } = c.var.ctx;
  if (!db) {
    throw new HTTPException(500, { message: "DB not available" });
  }
  const { actor } = c.req.query();
  console.log(">>>>>>>>>>>>>. getting profile for actor", actor);
  return c.json(await getProfile(actor));
});

"";
interface ServerData {
  uri: string;
  creator: string;
  name: string;
  channels: {
    uri: string;
    name: string;
  }[];
}

const runServerQuery = ({
  uris,
  did,
  db,
}: {
  db: Database;
  uris: string[] | undefined;
  did: string | undefined;
}): ServerData[] => {
  const sql = (where: string = "") =>
    db.prepare(`SELECT 
      s.uri,
      s.name,
      s.creator,
      json_group_array(
        json_object(
          'uri', c.uri,
          'name', c.name
        )
      ) as channels
    FROM servers s
    INNER JOIN channels c ON c.server = s.uri
    ${where ? `WHERE ${where}` : ""}
    GROUP BY s.uri, s.name, s.creator`);

  if (uris && uris.length > 0) {
    return sql(`s.uri IN (${uris.map((u) => `'${u}'`).join(", ")})`).all<
      ServerData
    >();
  } else if (did) {
    return sql(`s.creator = :did`).all<ServerData>({
      did,
    });
  }

  return sql().all<ServerData>();
};

app.get(`/xrpc/${ids.ChatTinychatServerGetServers}`, (c) => {
  const { db } = c.var.ctx;

  if (!db) {
    throw new HTTPException(500, { message: "DB not available" });
  }

  const { did } = c.req.query();
  const { uris } = c.req.queries();

  console.log(">>>>>>>>>>>>>. getting servers for", uris, did);

  const servers = runServerQuery({ db, uris, did });

  console.log(">>>>>>>>>>>>>. servers", servers);

  // const r = {
  //   servers: servers.map((s: ServerData) => ({
  //     uri: s.uri,
  //     creator: s.creator,
  //     name: s.name,
  //   })),
  // };
  return c.json({ servers });
});

"";
interface ChannelData {
  name: string;
  uri: string;
}

app.get(`/xrpc/${ids.ChatTinychatServerGetChannels}`, (c) => {
  const { db } = c.var.ctx;

  if (!db) {
    throw new HTTPException(500, { message: "DB not available" });
  }
  const { server } = c.req.query();
  return c.json({ channels: new Messaging(db).getChannels({ server }) });
});

"";
interface Message {
  uri: string;
  channel: string;
  server: string;
  text: string;
  createdAt: string;
  time_us: string;
  // user
  did: string;
  handle: string;
  displayName: string;
  avatar?: string;
  description?: string;
}

const pullMessagesFromDb = ({
  db,
  channel,
  uri,
  cursor,
  limit,
}: {
  db: Database;
  channel?: string;
  uri?: string;
  cursor?: string;
  limit: number;
}): {
  messages: MessageView[];
  cursor?: string;
} => {
  if (!channel && !uri) {
    return {
      messages: [],
    };
  }

  const messages = (
    channel
      ? db
        .prepare(
          `
      SELECT uri, channel, server, text, sender, created_at as createdAt, time_us,
        users.did, users.handle, users.display_name as displayName, users.avatar, users.description
      FROM messages
      INNER JOIN users ON messages.sender = users.did
      WHERE channel = :channel ${cursor ? `AND time_us < :cursor` : ""}
      ORDER BY time_us DESC
      LIMIT :limit
    `,
        )
        .all<Message>(
          Object.assign({ channel, limit }, cursor ? { cursor } : {}),
        )
      : db
        .prepare(
          `
      SELECT uri, channel, server, text, sender, created_at as createdAt, time_us,
        users.did, users.handle, users.display_name as displayName, users.avatar, users.description
      FROM messages
      INNER JOIN users ON messages.sender = users.did
      WHERE uri = :uri ${cursor ? `AND time_us < :cursor` : ""}
      ORDER BY time_us DESC
      LIMIT :limit
    `,
        )
        .all<Message>(Object.assign({ uri, limit }, cursor ? { cursor } : {}))
  ).map((m: Message) => ({
    uri: m.uri,
    channel: m.channel,
    server: m.server,
    text: m.text,
    createdAt: m.createdAt,
    time_us: m.time_us,
    sender: {
      did: m.did,
      handle: m.handle,
      displayName: m.displayName,
      avatar: m.avatar,
      description: m.description,
    },
  }));

  return {
    messages,
    cursor: messages.length > 0
      ? `${messages[messages.length - 1].time_us}`
      : undefined,
  };
};

app.get(`/xrpc/${ids.ChatTinychatServerGetMessages}`, (c) => {
  const { db } = c.var.ctx;
  if (!db) {
    throw new HTTPException(500, { message: "DB not available" });
  }
  const { channel, cursor, limit } = c.req.query();
  console.log(
    ">>>>>>>>>>>>>. getting messages for channel",
    channel,
    cursor,
    limit,
    typeof limit,
  );
  return c.json(
    pullMessagesFromDb({
      db,
      channel,
      cursor,
      limit: limit ? parseInt(limit) : 10,
    }),
  );
});

"";

import { z } from "zod";

app.post(`/xrpc/${ids.ChatTinychatServerSendMessage}`, async (c) => {
  const agent = await c.var.ctx.agent();

  if (!agent) {
    throw new HTTPException(401, { message: "Agent not available" });
  }

  const { server, channel, text } = z.object({
    channel: z.string(),
    server: z.string(),
    text: z.string(),
  }).parse(await c.req.json());

  const createdAt = new Date().toISOString();
  const d = await agent.chat.tinychat.core.message.create(
    { repo: agent.agent.assertDid },
    {
      server,
      channel,
      text,
      createdAt,
    },
  );

  return c.json({
    message: {
      uri: d.uri,
      channel,
      server,
      text,
      createdAt,
      sender: await getProfile(agent.agent.assertDid),
    },
  });
});

"";
app.post(`/xrpc/${ids.ChatTinychatServerMarkAllMessagesAsRead}`, async (c) => {
  const { db } = c.var.ctx;
  const agent = await c.var.ctx.agent();

  if (!agent) {
    throw new HTTPException(401, { message: "Agent not available" });
  }

  const { channel } = z.object({ channel: z.string() }).parse(
    await c.req.json(),
  );
  new Messaging(db!).markAllMessagesAsRead({
    channel,
    user: agent.agent.assertDid,
  });
  return c.json({});
});

"";

app.post(`/xrpc/${ids.ChatTinychatServerJoinServer}`, async (c) => {
  const agent = await c.var.ctx.agent();

  if (!agent) {
    throw new HTTPException(401, { message: "Agent not available" });
  }

  const { server } = z
    .object({
      server: z.string(),
    })
    .parse(await c.req.json());

  await agent.chat.tinychat.core.membership.create(
    { repo: agent.agent.assertDid },
    {
      server,
      createdAt: new Date().toISOString(),
    },
  );

  return c.json({});
});
