import { Agent, RichText } from "@atproto/api";
import { z } from "zod";
// ðŸ¦• AUTOGENERATED! DO NOT EDIT! File to edit: bsky.ipynb

const profileSchema = z.object({
  did: z.string(),
  handle: z.string(),
  displayName: z.string().optional(),
  avatar: z.string().optional(),
  labels: z.array(z.string()),
  createdAt: z.string(),
  description: z.string().optional(),
  banner: z.string().optional(),
  followersCount: z.number(),
  followsCount: z.number(),
  postsCount: z.number(),
});

export type Profile = z.infer<typeof profileSchema>;

export const getProfile = async (did: string): Promise<Profile> => {
  const { data } = await (new Agent("https://public.api.bsky.app/xrpc"))
    .getProfile({ actor: did });
  return profileSchema.parse(data);
};

export const getRichText = async (text: string): Promise<RichText> => {
  const rt = new RichText({ text });
  await rt.detectFacets(new Agent("https://public.api.bsky.app/xrpc"));
  return rt;
};

// console.log({
//   $type: "app.bsky.feed.post",
//   text: rt.text,
//   facets: rt.facets,
//   createdAt: new Date().toISOString(),
// });

/** ----------------tests ---------------- **/

import { assert, assertEquals } from "asserts";
// ðŸ¦• AUTOGENERATED! DO NOT EDIT! File to edit: bsky.ipynb

Deno.test("getRichText", async () => {
  const t = "Hello @alice.com, check out this link: https://example.com";
  const rt = await getRichText(t);
  assertEquals(rt.text, t, "rich text has original text");
  assert(rt.facets!.length > 0, "rich text has facets");
});
