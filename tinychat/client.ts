// 🦕 AUTOGENERATED! DO NOT EDIT! File to edit: client.ipynb

import { Hono } from "hono";
import { HTTPException } from "hono/http-exception";
import { logger } from "hono/logger";
import { getIronSession, IronSession } from "iron-session";
import { createMiddleware } from "hono/factory";
import { getOAuthClient } from "tinychat/oauth.ts";

export type Session = {
  did: string | undefined;
  // testing purposes
  t: string | undefined;
};

export type AppContext = {
  session: IronSession<Session>;
};

declare module "hono" {
  interface ContextVariableMap {
    ctx: AppContext;
  }
}

export type HonoServer = Hono<{
  Variables: {
    ctx: AppContext;
  };
}>;
export const app = new Hono();

app.use("*", logger());
app.use(
  "*",
  createMiddleware(async (c, next) => {
    if (!Deno.env.get("SESSION_COOKIE_KEY")) {
      throw new Error("SESSION_COOKIE_KEY is not set");
    }

    const session = await getIronSession<Session>(c.req.raw, c.res, {
      cookieName: "sid",
      password: Deno.env.get("SESSION_COOKIE_KEY")!,
      cookieOptions: {
        httpOnly: Deno.env.get("SESSION_COOKIE_ALLOW_INSECURE") ? false : true,
        secure: true, // set this to false in local (non-HTTPS) development
        sameSite: "lax", // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite#lax
        path: "/",
      },
    });
    c.set("ctx", { session });
    await next();
  }),
);
app.get("/health", (c) => c.json({ status: "ok", t: c.var.ctx.session.t }));
app.get("/set-session-t", async (c) => {
  c.var.ctx.session.t = "foo";
  await c.var.ctx.session.save();
  return c.json({ status: "ok", t: c.var.ctx.session.t });
});
const oauthClient = getOAuthClient();

app.get("/client-metadata.json", (c) => c.json(oauthClient.clientMetadata));

app.get("/oauth/callback", async (c) => {
  const { session } = c.var.ctx;
  const params = new URLSearchParams(c.req.url.split("?")[1]);
  const { session: oauthSession } = await oauthClient.callback(params);
  session.did = oauthSession.did;
  await session.save();
  return c.redirect("/");
});

app.post("/login", async (c) => {
  try {
    const body = await c.req.parseBody();
    // @ts-ignore it's a string, yo
    const handle: string | undefined = body?.handle;

    if (!handle) {
      throw new HTTPException(400, { message: "Missing handle" });
    }

    const url = await oauthClient.authorize(handle, {
      scope: "atproto transition:generic",
    });

    return c.redirect(url.toString());
  } catch (e) {
    console.error(e);
    return c.json({ error: "Internal server error" }, 500);
  }
});

/*
import { Hono } from "hono";
import { logger } from "hono/logger";
import { Agent } from "@atproto/api";
import { TID } from "@atproto/common";

const app = new Hono();
const oauthClient = getOAuthClient();

app.use("*", logger());
app.get("/client-metadata.json", async (c) => {
  return c.json(oauthClient.clientMetadata);
});

app.get("/oauth/callback", async (c) => {
  const params = new URLSearchParams(c.req.url.split("?")[1]);

  const { session } = await oauthClient.callback(params);

  console.log("session", session);

  const oauthSession = await oauthClient.restore(session.did);

  console.log("oauth session", oauthSession);


  const agent = new Agent(oauthSession);

  console.log(
    await agent.com.atproto.repo.getRecord({
      repo: agent.assertDid, // The user
      collection: "app.bsky.actor.profile", // The collection
      rkey: "self", // The record key
    })
  );
const rkey = TID.nextStr();

  console.log(


// Write the
await agent.com.atproto.repo.putRecord({
  repo: agent.assertDid,                 // The user
  collection: 'xyz.statusphere.status',  // The collection
  rkey,                                  // The record key
  record: {                              // The record value
    status: "👍",
    createdAt: new Date().toISOString()
  }
})
  );

  return c.redirect("/");
});

app.get("/login", async (c) => {
  const url = await oauthClient.authorize("callmephilip.com", {
    scope: "atproto transition:generic",
  });
  return c.redirect(url.toString());
});

*/
