// ðŸ¦• AUTOGENERATED! DO NOT EDIT! File to edit: db.ipynb

import { Database } from "@db/sqlite";

const tables: Record<string, string> = {
  users: `
    CREATE TABLE users (
      did TEXT PRIMARY KEY,
      handle TEXT NOT NULL,
      display_name TEXT NOT NULL,
      avatar TEXT,
      description TEXT
    )`,
  servers: `
    CREATE TABLE servers (
      uri TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      creator TEXT NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (creator) REFERENCES users(did)
    );`,
  channels: `CREATE TABLE channels (
  uri TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  server TEXT NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (server) REFERENCES servers(uri)
);`,
  memberships: `CREATE TABLE memberships (
  uri TEXT PRIMARY KEY,
  server TEXT NOT NULL,
  created_at DATETIME NOT NULL,
  FOREIGN KEY (server) REFERENCES servers(uri)
);`,
  messages: `CREATE TABLE messages (
  uri TEXT PRIMARY KEY,
  channel TEXT NOT NULL,
  server TEXT NOT NULL,
  text TEXT NOT NULL,
  created_at DATETIME NOT NULL,
  FOREIGN KEY (channel) REFERENCES channels(uri),
  FOREIGN KEY (server) REFERENCES servers(uri)
);`,
};

export const getDatabase = () => {
  const db = new Database(Deno.env.get("DB_URL") || ":memory:");
  const existingTables = db
    .prepare("SELECT name FROM sqlite_master WHERE type='table'")
    .all<{ name: string }>();

  Object.keys(tables).forEach((table) => {
    if (!existingTables.some((t) => t.name === table)) {
      db.prepare(tables[table]).run();
    }
  });

  return db;
};

/** ----------------tests ---------------- **/

import { assert } from "asserts";
// ðŸ¦• AUTOGENERATED! DO NOT EDIT! File to edit: db.ipynb

Deno.test("getDatabase", () => {
  const db = getDatabase();
  const ts = db.prepare("SELECT name FROM sqlite_master WHERE type='table'")
    .all<{
      name: string;
    }>();
  assert(ts.length === 5);
  assert(ts.some((t) => t.name === "users"));
  assert(ts.some((t) => t.name === "servers"));
  assert(ts.some((t) => t.name === "channels"));
  assert(ts.some((t) => t.name === "memberships"));
  assert(ts.some((t) => t.name === "messages"));
});
