// ðŸ¦• AUTOGENERATED! DO NOT EDIT! File to edit: lexicons.ipynb

/** ----------------tests ---------------- **/

import { assert, assertRejects } from "asserts";
import { validateRecord } from "tinychat/api/types/chat/tinychat/core/server.ts";
import { TinychatAgent } from "tinychat/agent.ts";
import { TID } from "@atproto/common";
// ðŸ¦• AUTOGENERATED! DO NOT EDIT! File to edit: lexicons.ipynb

Deno.test("validate records using lexicons", () => {
  // names must be a string
  let r = validateRecord({ name: 5 });
  // @ts-ignore error is not defined
  assert(!r.success, r.error);

  // is required
  r = validateRecord({});
  // @ts-ignore error is not defined
  assert(!r.success, r.error);

  // all good
  r = validateRecord({ name: "test" });
  // @ts-ignore error is not defined
  assert(r.success, r.error);
});

Deno.test("test CRUD", async () => {
  const ta = await TinychatAgent.create();
  const name = `test-${TID.nextStr()}`;

  const r = await ta.chat.tinychat.core.server.create(
    {
      repo: ta.agent.assertDid,
    },
    {
      name,
    },
  );

  const rkey = r.uri.split("/").pop() || "";

  const rec = await ta.chat.tinychat.core.server.get({
    repo: ta.agent.assertDid,
    rkey,
  });

  assert(rec);
  assert(rec.value.name === name);
  assert(rec.uri === r.uri);

  const { records } = await ta.chat.tinychat.core.server.list({
    repo: ta.agent.assertDid,
    limit: 10,
  });

  assert(records.length <= 10);
  assert(records.find((r) => r.uri === rec.uri));

  await ta.chat.tinychat.core.server.delete({
    repo: ta.agent.assertDid,
    rkey,
  });

  assert(
    !(
      await ta.chat.tinychat.core.server.list({
        repo: ta.agent.assertDid,
        limit: 10,
      })
    ).records.find((r) => r.uri === rec.uri),
  );
});

Deno.test("test validation", async () => {
  const ta = await TinychatAgent.create();

  await assertRejects(() =>
    ta.chat.tinychat.core.server.create(
      { repo: ta.agent.assertDid },
      // @ts-ignore yolo
      validateRecord({ name: 5 }).value,
    )
  );
});

Deno.test("test basic data model", async () => {
  const ta = await TinychatAgent.create();
  const repo = ta.agent.assertDid;

  // create a server
  const { uri } = await ta.chat.tinychat.core.server.create(
    { repo },
    { name: "tinychat dev community" },
  );

  // join it

  await ta.chat.tinychat.core.membership.create({ repo }, {
    server: uri,
    createdAt: new Date().toISOString(),
  });

  // add channels to the server
  const channel = await ta.chat.tinychat.core.channel.create(
    { repo },
    { name: "general", server: uri },
  );

  // message the channel
  const message = await ta.chat.tinychat.core.message.create(
    { repo },
    {
      channel: channel.uri,
      text: "hello world",
      server: uri,
      createdAt: new Date().toISOString(),
      // @ts-ignore yolo
    },
  );

  // reply to it
  await ta.chat.tinychat.core.message.create(
    { repo },
    {
      channel: channel.uri,
      text: "nice post",
      server: uri,
      createdAt: new Date().toISOString(),
      reply: {
        root: { uri: message.uri, cid: message.cid },
        parent: { uri: message.uri, cid: message.cid },
      },
      // @ts-ignore yolo
    },
  );
});
