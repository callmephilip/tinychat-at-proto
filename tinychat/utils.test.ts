// ðŸ¦• AUTOGENERATED! DO NOT EDIT! File to edit: utils.ipynb

import { assert } from "asserts";
const processLine = (line: string): string => {
  if (!line.trim().match(/^import|export/ig)) {
    return line;
  }
  const module = line.split("from").pop()?.trim().replaceAll(/'|"|;/ig, "");
  if (!module || !module.startsWith(".") || module.endsWith(".ts")) {
    return line;
  }
  return line.replace(module!, `${module}.ts`);
};
const processFile = async (file: string): Promise<string> => {
  const text = await Deno.readTextFile(file);
  const modifiedText = text.split("\n").map(processLine).join("\n");
  await Deno.writeTextFile(file, modifiedText);
  return modifiedText;
};

import { walk } from "jsr:@std/fs/walk";

export const unslopifyModules = async (dir: string) => {
  for await (const dirEntry of walk(dir, { exts: ["ts"] })) {
    await processFile(dirEntry.path);
  }
};
export const sleep = (ms: number) =>
  new Promise((resolve) => setTimeout(resolve, ms));
export async function assertWithWait<T>(
  fn: () => Promise<T>,
  expected: T,
  delay: number = 5000,
) {
  await sleep(delay);
  assert((await fn()) === expected);
}
export const shortIdFromAtUri = (atUri: string) => {
  return atUri.split("/").pop();
};
import { ids } from "tinychat/api/lexicons.ts";

export const serverAtURIFromUrl = (url: string) => {
  const parts = url.split("?")[0].split("/chat")[1].replace(/^\//ig, "").split(
    "/",
  );
  return `at://did:plc:${parts[0]}/${ids.ChatTinychatCoreServer}/${parts[1]}`;
};

export const urlFromServerAtURI = (atUri: string) => {
  const parts = atUri.split(ids.ChatTinychatCoreServer);
  //@ts-ignore yolo
  const did = parts[0].split(":").pop().replace("/", "");
  //@ts-ignore yolo
  const rkey = parts[1].replace("/", "");
  return `/chat/${did}/${rkey}`;
};

/** ----------------tests ---------------- **/

import { assertEquals } from "asserts";
// ðŸ¦• AUTOGENERATED! DO NOT EDIT! File to edit: utils.ipynb

Deno.test("processLine", () => {
  assertEquals(
    processLine(
      `export * as ComAtprotoTempRequestPhoneVerification from "./types/com/atproto/temp/requestPhoneVerification";`,
    ),
    `export * as ComAtprotoTempRequestPhoneVerification from "./types/com/atproto/temp/requestPhoneVerification.ts";`,
  );
  assertEquals(
    processLine(
      `import * as ComAtprotoTempRequestPhoneVerification from "./types/com/atproto/temp/requestPhoneVerification";`,
    ),
    `import * as ComAtprotoTempRequestPhoneVerification from "./types/com/atproto/temp/requestPhoneVerification.ts";`,
  );
  assertEquals(processLine(`export class ChatNS {`), `export class ChatNS {`);
  assertEquals(
    processLine(
      `import * as ComAtprotoTempRequestPhoneVerification from "./types/com/atproto/temp/requestPhoneVerification.ts";`,
    ),
    `import * as ComAtprotoTempRequestPhoneVerification from "./types/com/atproto/temp/requestPhoneVerification.ts";`,
  );
});
Deno.test("processFile", async () => {
  const td = await Deno.makeTempDir({});
  await Deno.writeTextFile(
    `${td}/test.ts`,
    `
    export * as Foo from "./foo";
    import { bar } from "./bar";

    export class ChatNS {
      public foo: Foo;
      public bar: bar;
    }
  `,
  );
  await processFile(`${td}/test.ts`);
  assertEquals(
    await Deno.readTextFile(`${td}/test.ts`),
    `
    export * as Foo from "./foo.ts";
    import { bar } from "./bar.ts";

    export class ChatNS {
      public foo: Foo;
      public bar: bar;
    }
  `,
  );
});
Deno.test("assertWithWait", async () => {
  await assertWithWait(() => Promise.resolve(2), 2, 5000);
});

Deno.test("shortIdFromAtUri", () => {
  assertEquals(
    shortIdFromAtUri(
      "at://did:plc:ubdeopbbkbgedccgbum7dhsh/chat.tinychat.server/3lfu4indvy72b",
    ),
    "3lfu4indvy72b",
  );
});

Deno.test("serverAtURIFromUrl", () => {
  assertEquals(
    serverAtURIFromUrl(
      "https://tinychat.ngrok.app/chat/ubdeopbbkbgedccgbum7dhsh/3lgawfvbbtx2b",
    ),
    "at://did:plc:ubdeopbbkbgedccgbum7dhsh/chat.tinychat.core.server/3lgawfvbbtx2b",
  );
  assertEquals(
    serverAtURIFromUrl(
      "https://tinychat.ngrok.app/chat/ubdeopbbkbgedccgbum7dhsh/3lgawfvbbtx2b?a=1&b=2",
    ),
    "at://did:plc:ubdeopbbkbgedccgbum7dhsh/chat.tinychat.core.server/3lgawfvbbtx2b",
  );
});

Deno.test("urlFromServerAtURI", () => {
  assertEquals(
    urlFromServerAtURI(
      "at://did:plc:ubdeopbbkbgedccgbum7dhsh/chat.tinychat.core.server/3lgawfvbbtx2b",
    ),
    "/chat/ubdeopbbkbgedccgbum7dhsh/3lgawfvbbtx2b",
  );
});
