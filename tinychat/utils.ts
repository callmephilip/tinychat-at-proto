// ðŸ¦• AUTOGENERATED! DO NOT EDIT! File to edit: utils.ipynb

import { Agent, AtpAgent } from "@atproto/api";
import { ChatNS } from "tinychat/api/index.ts";

export class TinychatAgent {
  public chat: ChatNS;
  public agent: Agent;

  constructor(agent: Agent) {
    this.chat = new ChatNS(agent);
    this.agent = agent;
  }

  static async create(agent?: Agent | undefined): Promise<TinychatAgent> {
    if (agent) {
      return new TinychatAgent(agent);
    }

    const [service, identifier, password] = [
      Deno.env.get("TEST_AGENT_SERVICE"),
      Deno.env.get("TEST_AGENT_IDENTIFIER"),
      Deno.env.get("TEST_AGENT_PASSWORD"),
    ];

    if (!service || !identifier || !password) {
      throw new Error(
        "Missing TEST_AGENT_SERVICE, TEST_AGENT_IDENTIFIER, or TEST_AGENT_PASSWORD",
      );
    }

    const testAgent = new AtpAgent({ service });
    await testAgent.login({ identifier, password });

    return new TinychatAgent(testAgent);
  }
}
const processLine = (line: string): string => {
  if (!line.trim().match(/^import|export/ig)) {
    return line;
  }
  const module = line.split("from").pop()?.trim().replaceAll(/'|"|;/ig, "");
  if (!module || !module.startsWith(".") || module.endsWith(".ts")) {
    return line;
  }
  return line.replace(module!, `${module}.ts`);
};
const processFile = async (file: string): Promise<string> => {
  const text = await Deno.readTextFile(file);
  const modifiedText = text.split("\n").map(processLine).join("\n");
  await Deno.writeTextFile(file, modifiedText);
  return modifiedText;
};

import { walk } from "jsr:@std/fs/walk";

export const unslopifyModules = async (dir: string) => {
  for await (const dirEntry of walk(dir, { exts: ["ts"] })) {
    await processFile(dirEntry.path);
  }
};
